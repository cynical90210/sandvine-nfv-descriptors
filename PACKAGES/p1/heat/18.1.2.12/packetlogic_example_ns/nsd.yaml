heat_template_version: 2016-04-08


description: >
  A network service (NS) representing a complete PL system

parameters:

  psm_volumes:
    type: comma_delimited_list
    description: List of IDs for the PSM volumes to use. First in list is for the first PSM VM etc.

  pic_volumes:
    type: comma_delimited_list
    description: List of IDs for the PIC volumes to use. First in list is for the first PIC VM etc.

  management_provider_network:
    type: string
    description: Name or ID of the provider network use for management network Floating IPs.

  subscriber_provider_network:
    type: string
    description: Name or ID of the provider network use for subscriber network Floating IPs.

  dns_domain:
    type: string
    description: Name of DNS domain to use for Floating IP networks.

  cik:
    type: string
    description: Base 64 encoded string of CIK file content.


resources:

#
#  General Networks
#

  networks:
    type: packetlogic::standard_networks::ns
    properties:
      management_provider_network: { get_param: management_provider_network }
      subscriber_provider_network: { get_param: subscriber_provider_network }
      dns_domain: { get_param: dns_domain }


#
#  General VNFs
#

  lm_vnf:
    type: packetlogic::lm::vnf
    properties:
      management_network: { get_attr: [networks,management_net] }
      management_provider_network: { get_param: management_provider_network }
      dns_domain: { get_param: dns_domain }
      service_network: { get_attr: [networks,service_net] }
      cik: { get_param: cik }

  psm_vnf:
    type: packetlogic::psm::vnf
    properties:
      management_network: { get_attr: [networks,management_net] }
      service_network: { get_attr: [networks,service_net] }
      subscriber_network: { get_attr: [networks,subscriber_net] }
      volumes: { get_param: psm_volumes }
      management_provider_network: { get_param: management_provider_network }
      dns_domain: { get_param: dns_domain }

  pic_vnf:
    type: packetlogic::pic::vnf
    properties:
      management_network: { get_attr: [networks,management_net] }
      service_network: { get_attr: [networks,service_net] }
      volumes: { get_param: pic_volumes }
      management_provider_network: { get_param: management_provider_network }
      dns_domain: { get_param: dns_domain }

#
#  Channel Networks
#

  pre1_channels:
    type: packetlogic::channel_networks::ns
    properties:
      count: 1
      set: pre1

  pre2_channels:
   type: packetlogic::channel_networks::ns
   properties:
     count: 2
     set: pre2


#
#  PRE VNFs
#


  pre1_vnf:
    type: packetlogic::pre::vnf
    properties:
      name: pre1
      management_network: { get_attr: [networks,management_net] }
      service_network: { get_attr: [networks,service_net] }
      qsync_network: { get_attr: [networks,qsync_net] }
      flowsync_network: { get_attr: [networks,flowsync_net] }
      monitor_network: { get_attr: [networks,monitor_net] }
      channel_networks: { get_attr: [pre1_channels,networks] }
      management_provider_network: { get_param: management_provider_network }
      dns_domain: { get_param: dns_domain }
      channel_networks_count: 2

  pre2_vnf:
    type: packetlogic::pre::vnf
    properties:
      name: pre2
      management_network: { get_attr: [networks,management_net] }
      service_network: { get_attr: [networks,service_net] }
      qsync_network: { get_attr: [networks,qsync_net] }
      flowsync_network: { get_attr: [networks,flowsync_net] }
      monitor_network: { get_attr: [networks,monitor_net] }
      channel_networks: { get_attr: [pre2_channels,networks] }
      management_provider_network: { get_param: management_provider_network }
      dns_domain: { get_param: dns_domain }
      channel_networks_count: 4
