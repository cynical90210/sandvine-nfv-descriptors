heat_template_version: 2016-04-08

description: >
  A stack with 1 vPRE VM and associated resources

parameters:

  name:
    type: string
  flavor:
    type: string
  image:
    type: string

  channel_ports:
    type: comma_delimited_list
    default: ""

  management_ports:
    type: comma_delimited_list
    default: ""

resources:

  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      user_data: { get_resource: cloud_config }
      user_data_format: RAW
      networks:
        repeat:
          template:
            port : <%port%>
          for_each:
            <%port%> :
              str_split:
                - ','
                -  str_replace:
                     template:
                        __content__
                     params:
                        __content__: { list_join: [',',{str_split: [',',{ list_join: [',',{get_param: management_ports}, {get_param: channel_ports}] } ] } ] }

  cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:



        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        bootcmd:
          - ["set-aux-interfaces-qty", "2"]
        runcmd:
          - ["ln","-s","/etc/service/zeroconf","/var/service"]
          - ["get_osm_keys.sh"]
        write_files:
          - path: "/usr/libexec/cloud/get_osm_keys.sh"
            permissions: "0775"
            content: |
              #!/bin/bash
              keyindex=-1
              lastexitcode=0
              while [ $lastexitcode -eq 0 ]; do
                keyindex=$((keyindex + 1))
                curl -f -o /tmp/tmpkey http://169.254.169.254/latest/meta-data/public-keys/$keyindex/openssh-key
                lastexitcode=$?
                if [ $lastexitcode -eq 0 ]; then
                  cat /tmp/tmpkey >> /pl2/pl2/ssh-authorized-keys/root
                fi
              done
              if [ -e /pl2/pl2/ssh-authorized-keys/root ]; then
                chmod 0600 /pl2/pl2/ssh-authorized-keys/root
              fi
          - path: "/pl2/pl2/system-conf/if_aux_1_interface"
            permissions: "0664"
            owner: root
            content: |
              eth1
          - path: "/pl2/pl2/system-conf/if_aux_2_interface"
            permissions: "0664"
            owner: root
            content: |
              eth2
          - path: "/usr/libexec/cloud/lmregister.sh"
            permissions: "0775"
            content: |
              #!/bin/bash
              echo Starting >> /var/log/lmregister.log
              lmhost=$1
              ipaddr=$2
              pool=PRE
              name=$(hostname)
              data=$(echo "{\"name\":\"${name}\",\"ip\":\"${ipaddr}\",\"ssh_port\":42002,\"license-pool\":\"${pool}\"}")
              echo $data >> /var/log/lmregister.log 2>&1
              echo Found License manager !!!
              curl -X DELETE http://admin:pldemo00@${lmhost}:8092/api/systems/$name >> /var/log/lmregister.log 2>&1 
              system=$(curl http://admin:pldemo00@${lmhost}:8092/api/systems |gzip -d - |sed 's/name/\'$'\n/g' |grep $ipaddr |awk -F"[\"]" '{print $3}')
              if [ "$system" != "" ];then
                curl -X DELETE http://admin:pldemo00@${lmhost}:8092/api/systems/$system >> /var/log/lmregister.log 2>&1 
              fi
              while ! curl -H "Content-Type: application/json" -X POST -d $data http://admin:pldemo00@${lmhost}:8092/api/systems >> /var/log/lmregister.log 2>&1
              do
                sleep 30
              done
        
          - path: "/etc/service/zeroconf/run"
            permissions: "0775"
            content: |
              #!/usr/bin/env python
              from zeroconf import Zeroconf, ServiceInfo, ServiceBrowser
              import socket
              import logging
              import safelogging
              import subprocess
              import time
              import netifaces
              import os
              LOG=logging.getLogger()
              me=subprocess.check_output(['hostname']).rstrip('\n')
              backlog=[]
        
              def clear_backlog():
                  while len(backlog) > 0:
                      servicename,serviceaddr=backlog.pop()
                      LOG.info("Clear backlog "+servicename)
                      handle(servicename,serviceaddr)
        
              def handle(servicename,serviceaddr):
                   LOG.info(servicename+': '+serviceaddr)
                   servicetype=servicename.split('.')[1]
                   if servicetype=='PSM':
                       pass
                       # PRE takes no action on PSM discovery
                   elif servicetype=='PRE':
                       pass
                       # PRE takes no action on PRE discovery
                   elif servicetype=='PIC':
                       pass
                       # PRE takes no action on PIC discovery
                   else:
                       LOG.info("No handler for "+servicename)
          
              class Listener(object):
                  def add_service(self, zeroconf, type, name):
                      licensed = os.path.exists("/pl2/pl2/system-conf/packetlogicd.lic")
                      my_addr = netifaces.ifaddresses('aux_1')[netifaces.AF_INET][0]['addr']
                      info = zeroconf.get_service_info(type,name)
                      discovered_addr = socket.inet_ntoa(info.address)
                      if name.split('.')[0] == "LM":
                          LOG.info("LM: "+name+': '+discovered_addr)
                          LOG.info("Trying to register with LM..")
                          line="/usr/libexec/cloud/lmregister.sh "+discovered_addr+" "+my_addr+";exit 0"
                          subprocess.check_output(line,shell=True)
                          while not os.path.exists("/pl2/pl2/system-conf/packetlogicd.lic"):
                              time.sleep(10)
                          LOG.info("Detected license file, clearing backlog")
                          clear_backlog()
                      else:
                          if licensed:
                              LOG.info("licensed, processing "+name+" immediately")
                              handle(name,discovered_addr)
                          else:
                              LOG.info("not licensed, backlogging "+name)
                              backlog.append((name,discovered_addr))
                  def remove_service(self):
                      LOG.info("Service removed")
        
              def setup_logging():
                  handler = safelogging.ResilientSysLogHandler("/dev/log", "local2")
                  format = ("zeroconf: %(message)s")
                  handler.setFormatter(logging.Formatter(format))
                  root = logging.getLogger()
                  root.addHandler(handler)
                  root.setLevel(logging.DEBUG)
              if __name__ == '__main__':
                  while [i['addr'] for i in netifaces.ifaddresses('aux_1')[netifaces.AF_INET]]==[]:
                      time.sleep(10)
                  myaddr=[i['addr'] for i in netifaces.ifaddresses('aux_1')[netifaces.AF_INET]]
                  serviceindex=myaddr[0].split('.')[-1]
                  setup_logging()
                  r = Zeroconf(interfaces=myaddr)
                  desc = {}
                  info = ServiceInfo("_http._tcp.local.", serviceindex+".PRE._http._tcp.local.", socket.inet_aton(myaddr[0]), 1234, 0, 0, desc)
                  LOG.info("Registering service PRE, index "+serviceindex+", "+myaddr[0])
                  r.register_service(info)
                  listener = Listener()
                  LOG.info("Starting service browser")
                  browser = ServiceBrowser(r, "_http._tcp.local.", listener=listener)
                  while True:
                      time.sleep(1)
