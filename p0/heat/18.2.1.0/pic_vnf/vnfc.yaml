heat_template_version: 2016-04-08


description: >
  A stack with 1 vPIC VM and associated resources

parameters:

  index:
    type: string
    description: Index number of VM
    label: VM index
  flavor:
    type: string
    description: Flavor
    label: Flavor
  image:
    type: string
  management_network:
    type: string
  service_network:
    type: string
  storage_network:
    type: string
  security_group:
    type: string

  volume_ids:
    type: comma_delimited_list
    default: ""

  management_provider_network:
    type: string
    description: Provider network for management net
    label: Management network provider

  dns_domain:
    type: string


resources:


  vm:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template:
            PIC__index__
          params:
            __index__:  { get_param: index }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks: 
       - port: { get_resource: management_port }
       - port: { get_resource: service_port }
       - port: { get_resource: storage_port }
      user_data_format: RAW
      user_data: { get_resource: cloud_config }

 

  management_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: management_network }
      port_security_enabled: true
      security_groups:
        - { get_param: security_group }

  service_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: service_network }
      port_security_enabled: true
      security_groups:
        - { get_param: security_group }

  storage_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: storage_network }
      port_security_enabled: true
      security_groups:
        - { get_param: security_group }


  fip: 
    type: OS::Neutron::FloatingIP
    properties: 
      floating_network: { get_param: management_provider_network }
###      dns_domain: { get_param: dns_domain }
###      dns_name: 
###        str_replace:
###          template:
###            pic__index__
###          params:
###            __index__:  { get_param: index }

  fip_assign:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: fip }
      port_id: { get_resource: management_port }

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_param: [volume_ids, { get_param: index } ] }
      instance_uuid: { get_attr: [vm, show, id] }




  cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        runcmd:
          - ["ln","-s","/etc/service/zeroconf","/var/service"]
          - ["ln","-s","/etc/service/sysconfmonitor","/var/service"]
          - ["fixroutes.sh","21","aux_1"]
          - ["fixroutes.sh","22","aux_2"]
          - ["get_osm_keys.sh"]
          - ["wget", "-qP", "/tmp/fileserv/update/", "http://buildmaster.vbg.se.prnw.net/insights-builds/2.4.0/insights-storage-v2.4.0-psf.tar.gz.gpg"]
          - ["mkdir", "-p", "/data/psf-modules"]
          - ["gpg", "--decrypt", "--quiet", "--output", "/data/psf-modules/insights-storage.tar.gz", "/tmp/fileserv/update/insights-storage-v2.4.0-psf.tar.gz.gpg"]
        
        write_files:
          - path: "/usr/libexec/cloud/get_osm_keys.sh"
            permissions: "0775"
            content: |
              #!/bin/bash
              keyindex=-1
              lastexitcode=0
              while [ $lastexitcode -eq 0 ]; do
                keyindex=$((keyindex + 1))
                curl -f -o /tmp/tmpkey http://169.254.169.254/latest/meta-data/public-keys/$keyindex/openssh-key
                lastexitcode=$?
                if [ $lastexitcode -eq 0 ]; then
                  cat /tmp/tmpkey >> /pl2/pl2/ssh-authorized-keys/root
                fi
              done
              if [ -e /pl2/pl2/ssh-authorized-keys/root ]; then
                chmod 0600 /pl2/pl2/ssh-authorized-keys/root
              fi
          - path: "/etc/service/zeroconf/run"
            permissions: "0775"
            content: |
              #!/usr/bin/env python
              from zeroconf import Zeroconf, ServiceInfo, ServiceBrowser
              import socket
              import logging
              import safelogging
              import subprocess
              import time
              import netifaces
              import os
              import sys
              sys.path.append("/psf/insights-storage/libs")
              LOG=logging.getLogger()
              me=subprocess.check_output(['hostname']).rstrip('\n')
              backlog=[]
              initiator=False
              pics_found=[]
              #while not os.path.exists("/tmp/num-pics"):
              #    LOG.info("Waiting for /tmp/num-pics to exist")
              #    time.sleep(4)
              #pics_expected=int(open("/tmp/num-pics","r").read())-1
              pics_expected=3
              def clear_backlog():
                   while len(backlog) > 0:
                       sname,saddr,locaddr=backlog.pop()
                       LOG.info("Clear backlog "+sname)
                       if sname.split('.')[1] == 'PSM':
                           handle_psm(sname,saddr,locaddr)
                       elif sname.split('.')[1] == 'PRE':
                           handle_pre(sname,saddr)
                       elif sname.split('.')[1] == 'PIC':
                           handle_pic(sname,saddr,locaddr)
                       else:
                           LOG.info('Trying to clear backlog, no handler for '+sname)
              def handle_pic(svcname,svcaddr,myaddr):
                  LOG.info("handle_pic PIC:"+svcname+': '+svcaddr)
                  pics_found.append(svcaddr)
                  if len(pics_found)==pics_expected:
                      LOG.info("Three PICs found, determining if we're initiator")
                      initiator=myaddr==min(pics_found, key=lambda addr: int(myaddr.split('.')[-1]))
                      if initiator:
                          LOG.info("PIC initiator, entering handler")
                          vert_inst_cmd=' '.join(['chroot', '/data/vertica', '/opt/vertica/sbin/install_vertica','--hosts',','.join(pics_found),'--config-file','/opt/packetlogic/vertica/config','--ignore-install-config', '-T'])
                          LOG.info("Running SHELL=/bin/bash;"+vert_inst_cmd+" in 45 s (grace to let all nodes up)")
                          time.sleep(45)
                          vertinstallexitcode=1
                          while vertinstallexitcode!=0:
                              vertinstallexitcode=subprocess.call("SHELL=/bin/bash;"+vert_inst_cmd, shell=True)
                              LOG.info("Failed vertica install, sleeping 30 and retrying")
                              time.sleep(30)
                          LOG.info('Succeeded vertica install.')
                          from insights import cluster,vertica, PKG_TYPE, PSF_NAME
                          from insights.package import Package
                          Package.install(PSF_NAME, PKG_TYPE)
                          #subprocess.call(["psf-enable", "-m", "install", "/data/psf-modules/engineering-insights.tar.gz"])
                      else:
                          LOG.info("Not initiator, initiator will be "+str(min(pics_found, key=lambda addr: int(myaddr.split('.')[-1]))))
              def handle_psm(svcname,svcaddr,myaddr):
                   LOG.info("handle_psm PSM: "+svcname.split('.')[0]+': '+svcaddr)
                   if not svcname.startswith(me):
                       LOG.info("Peer, adding redundancy sync config")
                       changed=False
                       LOG.info("Trying psm-config")
                       psmconfout=""
                       while not psmconfout:
                           psmconfout=subprocess.check_output('psm-config;exit 0',shell=True)
                           time.sleep(10)
                       conf=json.loads(psmconfout)
                       for comp in conf['components']:
                           if comp['componentId']=='psm.model.syncer.client':
                               syncnodes=[]
                               for node in comp['config']['nodes']:
                                   syncnodes.append(node['hostName'])
                               if svcaddr not in syncnodes:
                                   changed=True
                                   syncclientnode={'useDirectConnection':True,'hostName':svcaddr}
                                   comp['config']['nodes'].append(syncclientnode)
                           if comp['componentId']=='psm.model.syncer.server':
                               listeners=[]
                               for listener in comp['config']['directListeners']:
                                   listeners.append(listener['listenHost'])
                               if myaddr not in listeners:
                                   changed=True
                                   syncserverlistener={'listenHost':myaddr}
                                   comp['config']['directListeners'].append(syncserverlistener)
                       if changed:
                           json.dump(conf,open('zeroconf.json','w'))
                           res=subprocess.call(['psm-config','zeroconf.json'])
                           LOG.info("Committed config with exit code"+str(res))
                       changed=False
                       syncnodes=[]
                       listeners=[]
        
              def handle_pre(svcname,svcaddr):
                  LOG.info("handle_pre PRE: "+svcname.split('.')[0]+': '+svcaddr)
                  psmconfout=""
                  while not psmconfout:
                      psmconfout=subprocess.check_output('psm-config;exit 0',shell=True)
                      time.sleep(10)
                  conf=json.loads(psmconfout)
                  #conf=json.loads(subprocess.check_output(['psm-config']))
                  provnodes=[]
                  for comp in conf['components']:
                      if comp['componentId']=='psm.provisionerng.host':
                          provnodes.append(comp['config']['hostName'])
                  if svcaddr not in provnodes:
                      provnode={'componentId':'psm.provisionerng.host','instanceId':None,'version':4,'config':{'group':'','serviceOrPort':'','startupState':'enabled','hostName':svcaddr,'useDirectConnection':False}}
                      conf['components'].append(provnode)
                      json.dump(conf,open('zeroconf.json','w'))
                      res=subprocess.call(['psm-config','zeroconf.json'])
                      LOG.info("Committed config with exit code "+str(res))
        
              class Listener(object):
                  def add_service(self, zeroconf, type, name):
                      licensed=os.path.exists("/pl2/pl2/system-conf/packetlogicd.lic")
                      storagenet=netifaces.ifaddresses('aux_2')[netifaces.AF_INET][0]['addr']
                      svnet=netifaces.ifaddresses('aux_1')[netifaces.AF_INET][0]['addr']
                      info = zeroconf.get_service_info(type,name)
                      addr = socket.inet_ntoa(info.address)
                      if name.split('.')[1] == "PSM":
                          if licensed:
                              LOG.info("licensed, processing PSM "+name+" immediately")
                              #handle_psm(name,addr,svnet)
                          else:
                              LOG.info("not licensed, backlogging psm "+name)
                              #backlog.append((name,addr,svnet))
                      elif name.split('.')[1] == "PRE":
                          if licensed:
                              LOG.info("licensed, processing PRE "+name+" immediately")
                              #handle_pre(name,addr)
                          else:
                              LOG.info("not licensed, backlogging PRE "+name)
                              #backlog.append((name,addr,svnet))
                      elif name.split('.')[1] == "PIC":
                          if licensed:
                              LOG.info("licensed, processing PIC "+name+" immediately")
                              handle_pic(name,info.properties['storage_net_ip'],storagenet)
                          else:
                              LOG.info("not licensed, backlogging PIC "+name)
                              backlog.append((name,info.properties['storage_net_ip'],storagenet))
                      elif name == "LM._http._tcp.local.":
                          LOG.info("LM: "+name.split('.')[0]+': '+addr)
                          LOG.info("Trying to register with LM..")
                          line="/usr/libexec/cloud/lmregister.sh "+addr+" "+svnet+";exit 0"
                          subprocess.check_output(line,shell=True)
                          while not os.path.exists("/pl2/pl2/system-conf/packetlogicd.lic"):
                              time.sleep(10)
                          LOG.info("Detected license file, enable IS PSF, clearing backlog")
                          subprocess.check_output(["psf-enable", "-m", "install", "/data/psf-modules/insights-storage.tar.gz"])
                          clear_backlog()
                      else:
                          LOG.info("Unknown service "+name)
                  def remove_service(self):
                      LOG.info("Service removed")
        
              def setup_logging():
                  handler = safelogging.ResilientSysLogHandler("/dev/log", "local2")
                  format = ("zeroconf: %(message)s")
                  handler.setFormatter(logging.Formatter(format))
                  root = logging.getLogger()
                  root.addHandler(handler)
                  root.setLevel(logging.DEBUG)
              if __name__ == '__main__':
                  while [i['addr'] for i in netifaces.ifaddresses('aux_1')[netifaces.AF_INET]]==[]:
                      time.sleep(10)
                  my_sv_addr=[i['addr'] for i in netifaces.ifaddresses('aux_1')[netifaces.AF_INET]]
                  if me.startswith('pic'):
                      while [i['addr'] for i in netifaces.ifaddresses('aux_2')[netifaces.AF_INET]]==[]:
                          time.sleep(10)
                      my_storage_addr=[i['addr'] for i in netifaces.ifaddresses('aux_2')[netifaces.AF_INET]]
                  else:
                      my_storage_addr=""
                  setup_logging()
                  r = Zeroconf(interfaces=my_sv_addr)
                  serviceindex=my_sv_addr[0].split('.')[-1]
                  properties = {'storage_net_ip':my_storage_addr[0]}
                  info = ServiceInfo ("_http._tcp.local.", serviceindex+".PIC._http._tcp.local.", socket.inet_aton(my_sv_addr[0]), 1234, 0, 0, properties=properties)
                  LOG.info("Registering service, PIC._http._tcp.local. "+my_sv_addr[0])
                  r.register_service(info)
                  listener = Listener()
                  LOG.info("Starting service browser")
                  browser = ServiceBrowser(r, "_http._tcp.local.", listener=listener)
                  while True:
                      time.sleep(1)
        
          - path: /usr/libexec/cloud/fixroutes.sh
            permissions: "0755"
            owner: root
            content: |
              #!/bin/bash
              TABLE=$1
              DEVICE=$2
              echo TABLE $TABLE >> /var/log/fixroutes-$DEVICE.log
              echo DEVICE $DEVICE >> /var/log/fixroutes-$DEVICE.log
              IP_CIDR=$(ip -o -f inet addr show $DEVICE |grep brd|awk '{print $4}')
              SUFFIX=$(echo $IP_CIDR|awk -F '/' '{print $2}')
              NETWORK=$(ipcalc -n $IP_CIDR|awk -F '=' '{print $2}')
              echo IP_CIDR $IP_CIDR >> /var/log/fixroutes-$DEVICE.log
              echo SUFFIX $SUFFIX >> /var/log/fixroutes-$DEVICE.log
              echo NETWORK $NETWORK >> /var/log/fixroutes-$DEVICE.log
              CIDR="$NETWORK/$SUFFIX"
              echo CIDR $CIDR >> /var/log/fixroutes-$DEVICE.log
              # This assumes that GW address is network address with .0 replaced by .1
              GATEWAY="$(echo $NETWORK|sed s'/.$//')1"
              echo GATEWAY $GATEWAY >> /var/log/fixroutes-$DEVICE.log
              ip route add default via $GATEWAY table $TABLE
              ip route add $CIDR dev $DEVICE table $TABLE
              ip rule add from $CIDR table $TABLE
              ip route flush cache
              exit 0
          - path: "/usr/libexec/cloud/ci-init-storage.sh"
            permissions: "0775"
            content: |
              #!/bin/bash
              if ! blkid -s TYPE /dev/vdb1 &>/dev/null; then
                echo "No partition detectable /dev/vdb1"
                if /usr/sbin/parted -s /dev/vdb -- mklabel gpt mkpart primary 4096s -34 ; then
                  if /sbin/mkfs.ext4 -j -b 4096 -m 0 -E stride=64 /dev/vdb1; then
                     /sbin/tune2fs -i 0 -c 0 /dev/vdb1
                     ACTION=add DEVNAME="vdb1" /sbin/hotplug.mini block
                     /etc/init.d/statistics
                  fi
                fi
              fi
          - path: "/etc/service/sysconfmonitor/run"
            permissions: "0775"
            content: |
              #!/bin/bash
              inotifyd /usr/libexec/cloud/sysconfmonitor /pl2/pl2/system-conf:nd
          - path: "/usr/libexec/cloud/sysconfmonitor"
            permissions: "0755"
            content: |
              #!/bin/bash
              date >> /var/log/sysconfmonitor.log
              echo $* >> /var/log/sysconfmonitor.log
              case "$3" in
                packetlogicd.lic)
                  if [ "$1" == "n" ];then
                    echo "$(date): License file created."  >> /var/log/sysconfmonitor.log
                    ci-init-storage.sh
                  fi 
              esac
          - path: "/pl2/pl2/system-conf/if_aux_1_interface"
            permissions: "0664"
            owner: root
            content: |
              eth1
          - path: "/pl2/pl2/system-conf/if_aux_2_interface"
            permissions: "0664"
            owner: root
            content: |
              eth2
          - path: "/usr/libexec/cloud/lmregister.sh"
            permissions: "0775"
            content: |
              #!/bin/bash
              echo Starting >> /var/log/lmregister.log
              lmhost=$1
              ipaddr=$2
              pool=PIC
              name=$(hostname)
              data=$(echo "{\"name\":\"${name}\",\"ip\":\"${ipaddr}\",\"ssh_port\":42002,\"license-pool\":\"${pool}\"}")
              echo $data >> /var/log/lmregister.log 2>&1
              echo Found License manager !!!
              curl -X DELETE http://admin:pldemo00@${lmhost}:8092/api/systems/$name >> /var/log/lmregister.log 2>&1 
              system=$(curl http://admin:pldemo00@${lmhost}:8092/api/systems |gzip -d - |sed 's/name/\'$'\n/g' |grep $ipaddr |awk -F"[\"]" '{print $3}')
              if [ "$system" != "" ];then
                curl -X DELETE http://admin:pldemo00@${lmhost}:8092/api/systems/$system >> /var/log/lmregister.log 2>&1 
              fi
              while ! curl -H "Content-Type: application/json" -X POST -d $data http://admin:pldemo00@${lmhost}:8092/api/systems >> /var/log/lmregister.log 2>&1
              do
                sleep 30
              done
